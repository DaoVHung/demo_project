package ra.Model.DaoImp;import ra.Model.Dao.ContactDao;import ra.Model.Entity.Contact;import ra.Model.Entity.Product;import ra.Model.Util.ConnectionDataBase;import java.sql.CallableStatement;import java.sql.Connection;import java.sql.ResultSet;import java.util.ArrayList;import java.util.List;public class ContactDaoImp implements ContactDao<Contact, String> {    @Override    public List<Contact> getAll() {        Connection conn = null;        CallableStatement callSt = null;        List<Contact> contactList = null;        try {            conn = ConnectionDataBase.openConnection();            callSt = conn.prepareCall("{call 8pr_GetContact()}");            ResultSet rs = callSt.executeQuery();            contactList = new ArrayList<>();            while (rs.next()) {                Contact contact = new Contact();                contact.setContactID(rs.getInt("ContactID"));                contact.setAddress(rs.getString("Address"));                contact.setEmail(rs.getString("Email"));                contact.setWebsite(rs.getString("Website"));                contact.setPhoneNumber(rs.getInt("PhoneNumber"));                contactList.add(contact);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            ConnectionDataBase.closeConnection(conn, callSt);        }        return contactList;    }    @Override    public boolean create(Contact contact) {        Connection conn = null;        CallableStatement callSt = null;        boolean result = true;        try {            conn = ConnectionDataBase.openConnection();            callSt = conn.prepareCall("{call 8pr_UpdateContact(?,?,?,?,?)}");            callSt.setInt(1, contact.getContactID());            callSt.setInt(2, contact.getPhoneNumber());            callSt.setString(3, contact.getEmail());            callSt.setString(4, contact.getWebsite());            callSt.setString(5, contact.getAddress());            callSt.executeUpdate();        } catch (Exception e) {            result = false;            e.printStackTrace();        } finally {            ConnectionDataBase.closeConnection(conn, callSt);        }        return result;    }    @Override    public boolean update(Contact contact) {        Connection conn = null;        CallableStatement callSt = null;        boolean result = true;        try {            conn = ConnectionDataBase.openConnection();            callSt = conn.prepareCall("{call 8pr_UpdateContact(?,?,?,?,?)}");            callSt.setInt(1, contact.getContactID());            callSt.setInt(2, contact.getPhoneNumber());            callSt.setString(3, contact.getEmail());            callSt.setString(4, contact.getWebsite());            callSt.setString(5, contact.getAddress());            callSt.executeUpdate();        } catch (Exception e) {            result = false;            e.printStackTrace();        } finally {            ConnectionDataBase.closeConnection(conn, callSt);        }        return result;    }    @Override    public boolean delete(String id) {        return false;    }    @Override    public Contact getById(String id) {        return null;    }    public Contact getById(Integer id) {        Connection conn = null;        CallableStatement callSt = null;        Contact contact  = null;        try {            conn = ConnectionDataBase.openConnection();            callSt = conn.prepareCall("{call 8pr_GetById(?)}");            callSt.setInt(1, id);            ResultSet rs = callSt.executeQuery();            contact = new Contact();            if (rs.next()) {                contact.setContactID(rs.getInt("ContactID"));                contact.setAddress(rs.getString("Address"));                contact.setEmail(rs.getString("Email"));                contact.setWebsite(rs.getString("Website"));                contact.setPhoneNumber(rs.getInt("PhoneNumber"));            }        } catch (Exception e) {            e.printStackTrace();        } finally {            ConnectionDataBase.closeConnection(conn, callSt);        }        return contact;    }}