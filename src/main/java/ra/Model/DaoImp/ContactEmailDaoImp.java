package ra.Model.DaoImp;import ra.Model.Dao.CatalogDao;import ra.Model.Dao.ContactEmailDao;import ra.Model.Entity.Catalog;import ra.Model.Entity.Contact;import ra.Model.Entity.ContactEmail;import ra.Model.Util.ConnectionDataBase;import java.sql.CallableStatement;import java.sql.Connection;import java.sql.ResultSet;import java.util.ArrayList;import java.util.List;public class ContactEmailDaoImp implements ContactEmailDao<ContactEmail, String> {    @Override    public List<ContactEmail> getAll() {        Connection conn = null;        CallableStatement callSt = null;        List<ContactEmail> contactList = null;        try {            conn = ConnectionDataBase.openConnection();            callSt = conn.prepareCall("{call 9pr_GetAllEmail()}");            ResultSet rs = callSt.executeQuery();            contactList = new ArrayList<>();            while (rs.next()) {                ContactEmail contact = new ContactEmail();                contact.setContactEmailID(rs.getInt("contactemailID"));                contact.setName(rs.getString("Name"));                contact.setEmail(rs.getString("Email"));                contact.setSubject(rs.getString("Subject"));                contact.setMessage(rs.getString("Message"));                contactList.add(contact);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            ConnectionDataBase.closeConnection(conn, callSt);        }        return contactList;    }    @Override    public boolean create(ContactEmail contactEmail) {        Connection conn = null;        CallableStatement callSt = null;        boolean result = true;        try {            conn = ConnectionDataBase.openConnection();            callSt = conn.prepareCall("{call 9pr_CreateContactEmail(?,?,?,?)}");            callSt.setString(1, contactEmail.getName());            callSt.setString(2,contactEmail.getEmail());            callSt.setString(3, contactEmail.getSubject());            callSt.setString(4, contactEmail.getMessage());            callSt.execute();        } catch (Exception e) {            result = false;            e.printStackTrace();        } finally {            ConnectionDataBase.closeConnection(conn, callSt);        }        return result;    }    @Override    public boolean update(ContactEmail contactEmail) {        return false;    }    @Override    public boolean delete(String id) {        return false;    }    @Override    public ContactEmail getById(String id) {        return null;    }}