package ra.Model.DaoImp;import ra.Model.Dao.StarDao;import ra.Model.Entity.Order;import ra.Model.Entity.Star;import ra.Model.Util.ConnectionDataBase;import java.sql.*;import java.util.ArrayList;import java.util.List;public class starDaoImp implements StarDao<Star, String> {    public List<Star> getAllConfirm() {        Connection conn = null;        CallableStatement callSt = null;        List<Star> stars = null;        try {            conn = ConnectionDataBase.openConnection();            callSt = conn.prepareCall("{call 7pr_GetAllConfirm()}");            ResultSet rs = callSt.executeQuery();            stars = new ArrayList<>();            while (rs.next()) {                Star star = new Star();                star.setStarID(rs.getInt("StarID"));                star.setUserID(rs.getInt("UserID"));                star.setOrderID(rs.getInt("OrderID"));                star.setFullName(rs.getString("FullName"));                star.setProductID(rs.getInt("ProductID"));                star.setProductName(rs.getString("ProductName"));                star.setNumberStar(rs.getInt("StarNumber"));                star.setStarStatus(rs.getBoolean("StarStatus"));                stars.add(star);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            ConnectionDataBase.closeConnection(conn, callSt);        }        return stars;    }    @Override    public List<Star> getAll() {        Connection conn = null;        CallableStatement callSt = null;        List<Star> stars = null;        try {            conn = ConnectionDataBase.openConnection();            callSt = conn.prepareCall("{call 7pr_GetAllStar()}");            ResultSet rs = callSt.executeQuery();            stars = new ArrayList<>();            while (rs.next()) {                Star star = new Star();                star.setStarID(rs.getInt("StarID"));                star.setUserID(rs.getInt("UserID"));                star.setOrderID(rs.getInt("OrderID"));                star.setFullName(rs.getString("FullName"));                star.setProductID(rs.getInt("ProductID"));                star.setProductName(rs.getString("ProductName"));                star.setNumberStar(rs.getInt("StarNumber"));                star.setStarStatus(rs.getBoolean("StarStatus"));                stars.add(star);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            ConnectionDataBase.closeConnection(conn, callSt);        }        return stars;    }    @Override    public boolean create(Star star) {        Connection conn = null;        CallableStatement callSt = null;        boolean result = true;        try {            conn = ConnectionDataBase.openConnection();            callSt = conn.prepareCall("{call 7pr_insertStar(?,?,?,?)}");            callSt.setInt(1, star.getUserID());            callSt.setInt(2, star.getProductID());            callSt.setInt(3,star.getOrderID());            callSt.setInt(4, star.getNumberStar());            callSt.execute();        } catch (Exception e) {            result = false;            e.printStackTrace();        } finally {            ConnectionDataBase.closeConnection(conn, callSt);        }        return result;    }    @Override    public boolean update(Star star) {        Connection conn = null;        CallableStatement callSt = null;        boolean result = true;        try {            conn = ConnectionDataBase.openConnection();            callSt = conn.prepareCall("{call 7pr_Update_Star(?,?)}");            callSt.setInt(1, star.getStarID());            callSt.setBoolean(2, star.isStarStatus());            callSt.executeUpdate();        } catch (Exception e) {            result = false;            e.printStackTrace();        } finally {            ConnectionDataBase.closeConnection(conn, callSt);        }        return result;    }    @Override    public boolean delete(String id) {        return false;    }    @Override    public Star getById(String id) {        return null;    }    @Override    public List<Star> searchBillByName(String name) throws SQLException {        return null;    }    @Override    public List<Star> searchProductByName(String name) {        Connection conn = null;        CallableStatement callSt = null;        List<Star> stars = null;        try {            conn = ConnectionDataBase.openConnection();            callSt = conn.prepareCall("{call 7pr_SearchByName(?)}");            callSt.setString(1,name);            ResultSet rs = callSt.executeQuery();            stars = new ArrayList<>();            while (rs.next()) {                Star star = new Star();                star.setStarID(rs.getInt("StarID"));                star.setUserID(rs.getInt("UserID"));                star.setOrderID(rs.getInt("OrderID"));                star.setFullName(rs.getString("FullName"));                star.setProductID(rs.getInt("ProductID"));                star.setProductName(rs.getString("ProductName"));                star.setNumberStar(rs.getInt("StarNumber"));                star.setStarStatus(rs.getBoolean("StarStatus"));                stars.add(star);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            ConnectionDataBase.closeConnection(conn, callSt);        }        return stars;    }    @Override    public List<Star> searchByconfirm(String name) {        Connection conn = null;        CallableStatement callSt = null;        List<Star> stars = null;        try {            conn = ConnectionDataBase.openConnection();            callSt = conn.prepareCall("{call 7pr_SearchByConfirm(?)}");            callSt.setString(1,name);            ResultSet rs = callSt.executeQuery();            stars = new ArrayList<>();            while (rs.next()) {                Star star = new Star();                star.setStarID(rs.getInt("StarID"));                star.setUserID(rs.getInt("UserID"));                star.setOrderID(rs.getInt("OrderID"));                star.setFullName(rs.getString("FullName"));                star.setProductID(rs.getInt("ProductID"));                star.setProductName(rs.getString("ProductName"));                star.setNumberStar(rs.getInt("StarNumber"));                star.setStarStatus(rs.getBoolean("StarStatus"));                stars.add(star);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            ConnectionDataBase.closeConnection(conn, callSt);        }        return stars;    }    @Override    public boolean delete(Integer id) {        return false;    }    public Integer getbyID(Integer id){        Connection conn = null;        CallableStatement callSt = null;        Integer starNumber = null;        try {            conn = ConnectionDataBase.openConnection();            callSt = conn.prepareCall("{call 7pr_getById(?,?)}");            callSt.setInt(1, id);            callSt.registerOutParameter(2, Types.INTEGER);            callSt.execute();            starNumber = callSt.getInt(2);        } catch (Exception e) {            e.printStackTrace();        } finally {            ConnectionDataBase.closeConnection(conn, callSt);        }        return starNumber;    }    @Override    public Star getById(Integer id) {        return null   ;    }}